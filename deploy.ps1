
<#
.SYNOPSIS
    –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è WindowsOptimizer
    
.DESCRIPTION
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è Pull Request –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WindowsOptimizer.
    –û–Ω —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤, –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    –∏ —Å–æ–∑–¥–∞—ë—Ç draft PR —á–µ—Ä–µ–∑ GitHub CLI.
    
.PARAMETER RepoUrl
    URL GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: https://github.com/Serg2206/WindowsOptimizer)
    
.PARAMETER BranchName
    –ò–º—è –≤–µ—Ç–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: automation/update-docs)
    
.EXAMPLE
    .\deploy.ps1
    
.EXAMPLE
    .\deploy.ps1 -RepoUrl "https://github.com/username/repo" -BranchName "automation/custom-branch"
#>

param(
    [Parameter(Mandatory=$false)]
    [string]$RepoUrl = "https://github.com/Serg2206/WindowsOptimizer",
    
    [Parameter(Mandatory=$false)]
    [string]$BranchName = "automation/update-docs"
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
$ErrorActionPreference = "Stop"

# –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
function Write-ColorOutput {
    param(
        [string]$Message,
        [string]$Color = "White"
    )
    Write-Host $Message -ForegroundColor $Color
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function Write-Step {
    param([string]$Message)
    Write-ColorOutput "`n[STEP] $Message" "Cyan"
}

function Write-Success {
    param([string]$Message)
    Write-ColorOutput "[‚úì] $Message" "Green"
}

function Write-Error {
    param([string]$Message)
    Write-ColorOutput "[‚úó] $Message" "Red"
}

function Write-Info {
    param([string]$Message)
    Write-ColorOutput "[i] $Message" "Yellow"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Git
Write-Step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Git..."
try {
    $gitVersion = git --version
    Write-Success "Git —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $gitVersion"
} catch {
    Write-Error "Git –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    Write-Info "–°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git —Å https://git-scm.com/download/win"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GitHub CLI
Write-Step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ GitHub CLI..."
try {
    $ghVersion = gh --version
    Write-Success "GitHub CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $($ghVersion[0])"
} catch {
    Write-Error "GitHub CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    Write-Info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é GitHub CLI —á–µ—Ä–µ–∑ winget..."
    
    try {
        winget install --id GitHub.cli --silent --accept-package-agreements --accept-source-agreements
        Write-Success "GitHub CLI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        Write-Info "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ PowerShell –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        exit 0
    } catch {
        Write-Error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å GitHub CLI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        Write-Info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: https://cli.github.com/"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GitHub CLI
Write-Step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ GitHub..."
try {
    $ghAuth = gh auth status 2>&1
    if ($LASTEXITCODE -ne 0) {
        Write-Info "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ GitHub CLI..."
        gh auth login
    } else {
        Write-Success "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ GitHub CLI"
    }
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
    Write-Info "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: gh auth login"
    exit 1
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–µ–π
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
$projectName = "WindowsOptimizer_Automation"
$workDir = Join-Path $env:TEMP $projectName

Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞..."
if (Test-Path $workDir) {
    Write-Info "–ö–∞—Ç–∞–ª–æ–≥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—á–∏—â–∞—é..."
    Remove-Item -Path $workDir -Recurse -Force
}
New-Item -ItemType Directory -Path $workDir | Out-Null
Write-Success "–†–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω: $workDir"

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
Write-Step "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
try {
    Set-Location $workDir
    git clone $RepoUrl .
    Write-Success "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $_"
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏
Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏..."
try {
    git checkout -b $BranchName
    Write-Success "–í–µ—Ç–∫–∞ '$BranchName' —Å–æ–∑–¥–∞–Ω–∞"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏: $_"
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤
Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤..."
$directories = @(
    ".github\workflows"
)

foreach ($dir in $directories) {
    $fullPath = Join-Path $workDir $dir
    if (-not (Test-Path $fullPath)) {
        New-Item -ItemType Directory -Path $fullPath -Force | Out-Null
        Write-Success "–°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: $dir"
    }
}

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
Write-Step "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏..."
$filesToCopy = @{
    ".github\workflows\pull_request.yml" = ".github\workflows\pull_request.yml"
    ".github\workflows\pr_with_changelog.yml" = ".github\workflows\pr_with_changelog.yml"
    "CHANGELOG.md" = "CHANGELOG.md"
    "README_AUTOMATION.md" = "README_AUTOMATION.md"
}

foreach ($file in $filesToCopy.Keys) {
    $sourcePath = Join-Path $scriptDir $file
    $destPath = Join-Path $workDir $filesToCopy[$file]
    
    if (Test-Path $sourcePath) {
        Copy-Item -Path $sourcePath -Destination $destPath -Force
        Write-Success "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: $file"
    } else {
        Write-Info "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω): $file"
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ README.md –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
if (-not (Test-Path (Join-Path $workDir "README.md"))) {
    Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ README.md..."
    @"
# WindowsOptimizer

–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Windows —Å–∏—Å—Ç–µ–º—ã.

## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É–∂–±–∞–º–∏

## üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
- Windows 10/11
- PowerShell 5.1 –∏–ª–∏ –≤—ã—à–µ

## üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞
```powershell
# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
git clone $RepoUrl
```

## ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ [README_AUTOMATION.md](README_AUTOMATION.md)

"@ | Out-File -FilePath (Join-Path $workDir "README.md") -Encoding UTF8
    Write-Success "README.md —Å–æ–∑–¥–∞–Ω"
}

# –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
Write-Step "–ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
try {
    git config user.name "Automation Script"
    git config user.email "automation@windowsoptimizer.local"
    
    git add .
    git commit -m "chore: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PR

- –î–æ–±–∞–≤–ª–µ–Ω—ã GitHub Actions workflows
- –°–æ–∑–¥–∞–Ω CHANGELOG.md
- –î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
- –ù–∞—Å—Ç—Ä–æ–µ–Ω deploy.ps1 —Å–∫—Ä–∏–ø—Ç"
    
    Write-Success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ: $_"
    exit 1
}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
Write-Step "–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
try {
    git push -u origin $BranchName
    Write-Success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≤–µ—Ç–∫—É '$BranchName'"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $_"
    Write-Info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    exit 1
}

# –°–æ–∑–¥–∞–Ω–∏–µ Pull Request
Write-Step "–°–æ–∑–¥–∞–Ω–∏–µ Draft Pull Request..."
try {
    $prBody = @"
## ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–≠—Ç–æ—Ç PR –¥–æ–±–∞–≤–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ WindowsOptimizer.

### üìã –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
- ‚úÖ GitHub Actions workflows –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è PR
- ‚úÖ CHANGELOG.md —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
- ‚úÖ README_AUTOMATION.md —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
- ‚úÖ PowerShell —Å–∫—Ä–∏–ø—Ç deploy.ps1 –¥–ª—è —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è

### üîß Workflows:
1. **pull_request.yml** - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë—Ç PR –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
2. **pr_with_changelog.yml** - –°–æ–∑–¥–∞—ë—Ç PR —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º CHANGELOG

### üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ workflows –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ README_AUTOMATION.md –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
4. –£—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ —ç—Ç–æ—Ç PR

---
üöÄ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ deploy.ps1
"@

    gh pr create `
        --title "feat: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ PR" `
        --body $prBody `
        --base main `
        --head $BranchName `
        --draft `
        --label "automation,enhancement"
    
    Write-Success "Draft Pull Request —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
} catch {
    Write-Error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PR: $_"
    Write-Info "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å PR –≤—Ä—É—á–Ω—É—é –Ω–∞ GitHub"
    exit 1
}

# –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
Write-ColorOutput "`n========================================" "Green"
Write-ColorOutput "‚úÖ –†–ê–ó–í–Å–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!" "Green"
Write-ColorOutput "========================================`n" "Green"

Write-Info "–ß—Ç–æ –¥–∞–ª—å—à–µ?"
Write-Host "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ GitHub –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π Draft PR" -ForegroundColor White
Write-Host "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã –≤ –≤–µ—Ç–∫–µ '$BranchName'" -ForegroundColor White
Write-Host "3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ README_AUTOMATION.md –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π" -ForegroundColor White
Write-Host "4. –£—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç–µ PR —Å –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–æ–π" -ForegroundColor White

Write-ColorOutput "`nüéâ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!" "Cyan"

# –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å PR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
$openBrowser = Read-Host "`n–û—Ç–∫—Ä—ã—Ç—å PR –≤ –±—Ä–∞—É–∑–µ—Ä–µ? (y/n)"
if ($openBrowser -eq 'y') {
    gh pr view --web
}

# –í–æ–∑–≤—Ä–∞—Ç –≤ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
Set-Location $scriptDir
